*** Javascript Execution Context ***

How things work in JS?      Single threaded process         Synchronous

Global Execution Context: Creates an environment for JS code to execute (declares a global scope)
    {my code} => Global Exectuion Context   =>  "this" keyword  ex. Window object for browsers, {} for node, etc
    Other execution contexts: Function ExecutionContext, Eval Execution Context

1. Memory Creation Phase : Memory is allocated to all variables (undefined) and functions (func defination/ func code)

2. Execution Phase : Code is excecuted. Variables are given their assigned values and for functions, it declares a Function Execution Context: new variable environment + execution thread. Since it's a new EC, creation phase and execution phase will be executed again. Function EC are created everytime the function is called. return statements are returned back to Global EC and the Function Ec gets deleted.

*** Call Stack : JS Execution Context works on the LIFO principle. ***

example code:
function one() { console.log("One"); two(); }
function two() { console.log("Two"); three(); }
function three() { console.log("Three"); }
one();

Call Stack for this would be:
Global EC => one() (Function EC) => two()       // Since two() is being called inside one()
Global Ec => two() => three()                   // three() will be added to stack and one() will be removed
Global Ec => three()                            // two() will be removed
Global EC                                       // three() will be removed and then GEC will end 
-- end --

*** DOM : Document Object Model ***
The Document Object Model (DOM) is a programming interface for HTML and XML documents. It defines the logical structure (tree) of documents (HTML elements) and the way a document is accessed and manipulated.

Using DOM, the JavaScript gets access to HTML as well as CSS of the web page and can also add behavior to the HTML elements. So basically Document Object Model is an API that represents and interacts with HTML or XML documents.


*** Async Javascript ***

JS Engine --> Memory Heap and Call Stack

Web API (Runtime environment: Browser or Node)
    DOM API : Tree structure model for document/html. Not supported in Node
    setTimeout : Executes once after a set period of time
    setInterval : Executes repeatedly after a set period of time
    fetch() : sends to High priotiy queue

Register Call Back: Contains functions which are passed from setTimeout, setInterval or from some event. Async - executes whenever user wants it to execute

Task Queue: Gets functions from Register Call Back and sends them to Call Stack. Callback functions

Microtask Queue: High Priority Task Queue using fetch()

Example Flow of a function containing setTimeout: Called an Event Loop
Call Stack  --call->  Web API  --after set time interval->  Register Call Back  ---> Task Queue ---> Call Stack 

fetch() --> Data and Browser/ Node
    Data: onFullFilled[] :- an array to store fetch API response - resolve()
          onRejection[] :- an array to store errors - reject()
          These arrays contain functions to pass the recieved data into usuable format which can be used by user.

    Web Browser/ Node: to send network request. If network request fails, then it goes to the reject(), else it passes the response to resolve() even on HTTP errors like 202,303,404,etc

*** Javascript and classes ***

OOP : style of writing code / programming paradigm
    - used to avoid spaghetti code (mess up of code)

Object : collection of properties (variables) and methods (functions)

Parts of OOP:   Object literal -> {}, Constructor function,  Prototypes,  Classes,  Instances

Pillars of OOP: Abstraction,  Encapsulation, Inheritence,  Polymorphism